package com.doorstop.liz.arrivalnotifier;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.doorstop.liz.arrivalnotifier.GeofenceModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GEOFENCE_MODEL.
*/
public class GeofenceModelDao extends AbstractDao<GeofenceModel, Long> {

    public static final String TABLENAME = "GEOFENCE_MODEL";

    /**
     * Properties of entity GeofenceModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Latitude = new Property(1, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(2, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Radius = new Property(3, Float.class, "radius", false, "RADIUS");
        public final static Property Expiration = new Property(4, Long.class, "expiration", false, "EXPIRATION");
        public final static Property TransitionType = new Property(5, Integer.class, "transitionType", false, "TRANSITION_TYPE");
    };


    public GeofenceModelDao(DaoConfig config) {
        super(config);
    }
    
    public GeofenceModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GEOFENCE_MODEL' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'LATITUDE' REAL," + // 1: latitude
                "'LONGITUDE' REAL," + // 2: longitude
                "'RADIUS' REAL," + // 3: radius
                "'EXPIRATION' INTEGER," + // 4: expiration
                "'TRANSITION_TYPE' INTEGER);"); // 5: transitionType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GEOFENCE_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GeofenceModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(2, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(3, longitude);
        }
 
        Float radius = entity.getRadius();
        if (radius != null) {
            stmt.bindDouble(4, radius);
        }
 
        Long expiration = entity.getExpiration();
        if (expiration != null) {
            stmt.bindLong(5, expiration);
        }
 
        Integer transitionType = entity.getTransitionType();
        if (transitionType != null) {
            stmt.bindLong(6, transitionType);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GeofenceModel readEntity(Cursor cursor, int offset) {
        GeofenceModel entity = new GeofenceModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // latitude
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // longitude
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // radius
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // expiration
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // transitionType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GeofenceModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLatitude(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setLongitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setRadius(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setExpiration(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setTransitionType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GeofenceModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GeofenceModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
