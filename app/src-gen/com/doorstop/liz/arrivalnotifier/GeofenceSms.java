package com.doorstop.liz.arrivalnotifier;

import com.doorstop.liz.arrivalnotifier.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table GEOFENCE_SMS.
 */
public class GeofenceSms {

    private Long id;
    private String phoneNumber;
    private String message;
    private long geofenceModelId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GeofenceSmsDao myDao;

    private GeofenceModel geofenceModel;
    private Long geofenceModel__resolvedKey;


    public GeofenceSms() {
    }

    public GeofenceSms(Long id) {
        this.id = id;
    }

    public GeofenceSms(Long id, String phoneNumber, String message, long geofenceModelId) {
        this.id = id;
        this.phoneNumber = phoneNumber;
        this.message = message;
        this.geofenceModelId = geofenceModelId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGeofenceSmsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public long getGeofenceModelId() {
        return geofenceModelId;
    }

    public void setGeofenceModelId(long geofenceModelId) {
        this.geofenceModelId = geofenceModelId;
    }

    /** To-one relationship, resolved on first access. */
    public GeofenceModel getGeofenceModel() {
        long __key = this.geofenceModelId;
        if (geofenceModel__resolvedKey == null || !geofenceModel__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GeofenceModelDao targetDao = daoSession.getGeofenceModelDao();
            GeofenceModel geofenceModelNew = targetDao.load(__key);
            synchronized (this) {
                geofenceModel = geofenceModelNew;
            	geofenceModel__resolvedKey = __key;
            }
        }
        return geofenceModel;
    }

    public void setGeofenceModel(GeofenceModel geofenceModel) {
        if (geofenceModel == null) {
            throw new DaoException("To-one property 'geofenceModelId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.geofenceModel = geofenceModel;
            geofenceModelId = geofenceModel.getId();
            geofenceModel__resolvedKey = geofenceModelId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
